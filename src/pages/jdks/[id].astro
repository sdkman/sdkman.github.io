---
import PageHeader from '@/components/PageHeader.astro';
import Container from '@/components/ui/Container.astro';
import Link from '@/components/ui/Link.astro';
import Layout from '@/layouts/Layout.astro';
import { Code } from 'astro-expressive-code/components';
import { Icon } from 'astro-icon/components';
import { getCollection, getEntry } from 'astro:content';

export async function getStaticPaths() {
  const allJDKs = await getCollection('jdks');

  return allJDKs.map((JDK) => ({ params: { id: JDK.data.id } }));
}

const { id } = Astro.params;

const JDK = await getEntry('jdks', id);

if (!JDK) {
  throw Error('Not Found');
}

const breadcrumbs = [
  { text: 'JDKs', href: '/jdks' },
  { text: `${JDK.data.distribution} (${JDK.data.vendor})` },
];
---

<Layout title={`${JDK.data.distribution} (${JDK.data.vendor})`}>
  <PageHeader
    title={`${JDK.data.distribution} (${JDK.data.vendor})`}
    breadcrumbs={breadcrumbs}
  />

  <Container class="grid grid-cols-1 gap-12 pb-20 lg:grid-cols-[1fr_250px]">
    <div class="flex flex-col gap-8">
      <p>{JDK.data.description}</p>

      <div>
        <h2 class="mb-4 text-2xl font-bold">Installation</h2>

        <Code
          code={`sdk install java x.y.z-${JDK.data.id}`}
          lang="shell"
          frame="code"
        />
      </div>
    </div>

    <div class="card flex h-fit flex-col gap-3">
      <div class="text-lg font-bold">Details</div>

      <Link class="flex items-center gap-1" href={JDK.data.url}
        >Website <Icon name="lucide:external-link" /></Link
      >

      {
        JDK.data.os?.icons && (
          <div>
            <div class="flex items-center gap-2">
              {JDK.data.os.icons.map((os) => (
                <Icon class="h-5 w-5" name={`simple-icons:${os}`} />
              ))}
            </div>
          </div>
        )
      }

      {
        JDK.data.architecture?.list && (
          <div>
            <div class="mb-2 font-bold">Architectures:</div>
            <ul class="flex list-inside list-disc flex-col gap-1 text-sm">
              {JDK.data.architecture?.list.map((arch) => (
                <li>{arch}</li>
              ))}
            </ul>
          </div>
        )
      }
    </div>
  </Container>
</Layout>
